type: edu
custom_name: Error!
files:
- name: src/calculator/Main.kt
  visible: true
  text: "\n\nfun main() {    // главная функция программы\n\n     // Создаём основ\
    ной цыкл программы. Мы его сможем закончить при помощи - break@Loop и прервать\
    \ - continue@Loop\n    Loop@while(true) {\n        // print(\">>> \")     // в\
    ывод для красивого ввода\n\n         // Принемаем ввод от пользователя, раздел\
    яем его по поробелам создаём строковый лист из значений\n        val inputList\
    \ = readln().split(\" \").toMutableList()\n        when {\n\n             // Е\
    сли пользователь введёт команду \"/help\",то пользователь получит всю ему необ\
    ходимую информацию\n            \"/help\" in inputList -> {\n                println(\"\
    The program calculates the sum of numbers\"); continue@Loop\n            }\n\n\
    \            // Если пользователь введёт команду \"/exit\", то пользователь те\
    м самым выйдет из калькулятора\n            \"/exit\" in inputList -> {\n    \
    \            println(\"Bye!\"); break@Loop\n            }\n            \n    \
    \        // если ничего не веденно, то игнорируем\n            inputList.size\
    \ == 1 -> continue@Loop\n\n            // Если не распознанно специяальных ком\
    анд, то мы отсортируем наш пользовательский ввод,\n            // Получим резу\
    льтат и напечатаем его\n            else -> {\n                val sortList =\
    \ BulkheadForSort(inputList).bulkheadForSort()\n                println(\"${Calculator(sortList).recipientValue()}\"\
    )\n            }\n        }\n    }\n}\n\n\n/*\n * Создание класса калькулятора\
    , который примет отсортированный лист чисели операций. Его единственная функци\
    я\n * создаст возращаемую переменную value, в которое будет помещенно первое з\
    начение, введённое пользователемю\n * Так же в ней перебирается полученный отс\
    ортированный массив и пребавляется или вычитается (в зависимости от ситуации)\n\
    \ * значение в переменную value\n */\n\nclass Calculator(_sortList: List<String>)\
    \ {\n    private val sortList = _sortList    // создаём поле для манипуляции с\
    \ отсортированным вводом\n\n    fun recipientValue(): Int {\n        var value\
    \ = this.sortList[1].toInt()    // записываем в результат первую цифру, введён\
    ную пользоватлем\n        for (i in this.sortList.indices) {  // проходимся по\
    \ массиву\n            when (this.sortList[i]) {\n                \"+\" -> value\
    \ += sortList[i + 1].toInt() // если встреченно значение \"+\", то прибавляем\
    \ следуещее число\n                \"-\" -> value -= sortList[i + 1].toInt() //\
    \ если встреченно значение \"-\", то вычитаем следуещее число\n            }\n\
    \        }\n        return value - this.sortList[1].toInt()   // выдаём резуль\
    тат\n    }\n}\n\n\n/*\n * Создание класса, принемающий пользовательский ввод.\
    \ В нем функции сортируют пользовательский ввод ( пропускает\n * только числа\
    \ с  доступными операциями - \"-\", \"+\" операциями, игнорирует пробелы, а та\
    к же преобразует выражения,\n * по типу \"---\", \"++++\" в более прростые ) и\
    \ помещают эти отсортированные значения в своё возращаемое значение.\n */\n\n\
    class BulkheadForSort(_inputList: List<String>) {\n    private val listNumbers\
    \ = mutableListOf<String>()   // создадим массив для ввода туда отфильтрованны\
    х частей\n    private val inputList = _inputList  // получаем пользовательский\
    \ ввод для с ней монипуляциями\n    private var indexOperation = \"+\"    // п\
    редварительное значение для встречной операции\n\n    fun bulkheadForSort(): MutableList<String>\
    \ {\n        val listPossibleOperation = mutableListOf(\"+\", \"-\") // запише\
    м доступные действия\n        loop@ for (j in this.inputList.indices) {   // п\
    роходим по пользовательскому вводу\n            try {\n                this.inputList[j].toInt()\
    \   // проверка на, то что это число\n                this.listNumbers.add(this.inputList[j])\
    \ // если это число добавим его в наш лист (фильтровочный список)\n          \
    \  } catch (_: Exception) {\n                when {\n                    // иг\
    норируем все лишние пробелы\n                    this.inputList[j] == \"\" ->\
    \ continue@loop\n                    // если это было не число, то проверим до\
    ступная ли это операция (если да, то мы её добавим в лист)\n                 \
    \   this.inputList[j] in listPossibleOperation -> this.listNumbers.add(this.inputList[j])\n\
    \                    // если это операция с двойным плюсом или минусом, то мы\
    \ добавим в лист \"+\"\n                    this.inputList[j].length % 2 == 0\
    \ -> this.listNumbers.add(\"+\")\n                    this.inputList[j].length\
    \ % 2 == 1 -> {\n                        counterPlusAndMinus(j)  // определяем\
    \ сокращённую запись для выражений: \"----\", \"+++\"\n                      \
    \  this.listNumbers.add(this.indexOperation)   // добавляем получинную сокращё\
    нную запись\n                    }\n                }\n                continue@loop\
    \   // если ничего из этого не подходим, то пропусним этот элемент\n         \
    \   }\n        }\n        return this.listNumbers  // возвращаем отфильтрованн\
    ый список\n    }\n\n    private fun counterPlusAndMinus(index: Int) {\n      \
    \  // принемаем индекс пользоватеского ввода, по которому будем искать правиль\
    ную сокращённую запись\n        when(this.inputList[index][0]) {\n           \
    \ '+' -> this.indexOperation = \"+\"    // если это выражение начинается с \"\
    +\", то мы запомним выражение как \"+\"\n            '-' -> this.indexOperation\
    \ = \"-\"    // если это выражение начинается с \"-\", то мы запомним выражени\
    е как \"-\"\n        }\n    }\n}\n"
  learner_created: false
- name: test/Test.java
  visible: false
  text: |
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;
    import org.hyperskill.hstest.testing.TestedProgram;

    import java.util.Arrays;
    import java.util.List;

    public class Test extends StageTest<String> {
        @Override
        public List<TestCase<String>> generate() {
            return Arrays.asList(
                new TestCase<String>().setDynamicTesting(() -> {

                    TestedProgram main = new TestedProgram();

                    // The base test suit that checks if the program
                    // correctly responses to the commands and can stop
                    main.start();

                    // test of /help
                    String output = main.execute("/help").trim();
                    if (output.length() < 4) {
                        return CheckResult.wrong(
                            "It seems like there was no any \"help\" message.");
                    }

                    // input empty string
                    output = main.execute("");
                    if (output.length() != 0) {
                        return CheckResult.wrong(
                            "Incorrect response to an empty string. " +
                            "The program should not print anything.");
                    }

                    // test of /exit
                    output = main.execute("/exit").trim().toLowerCase();
                    if (!output.startsWith("bye")) {
                        return CheckResult.wrong(
                            "Your program didn't print \"bye\" after entering \"/exit\".");
                    }

                    return new CheckResult(main.isFinished(),
                        "Your program should exit after entering \"/exit\".");
                }),

                new TestCase<String>().setDynamicTesting(() -> {
                    TestedProgram main = new TestedProgram();

                    // The test suit that checks functionality of the previous steps
                    main.start();

                    // sum of positive numbers
                    String output = main.execute("7 + 1 + 4").trim();
                    if (!output.equals("12")) {
                        return CheckResult.wrong("The program cannot sum more than two numbers.");
                    }

                    // sum mixed numbers & negative answer
                    output = main.execute("23 - 17 - 13").trim();
                    if (!output.equals("-7")) {
                        return CheckResult.wrong(
                            "Incorrect sum of positive and negative numbers.");
                    }

                    // testing a big amount of numbers
                    output = main.execute("33 + 21 + 11 + 49 - 32 - 9 + 1 - 80 + 4").trim();
                    if (!output.equals("-2")) {
                        return CheckResult.wrong(
                            "The program cannot process a large number of numbers.");
                    }

                    // input one number
                    output = main.execute("101").trim();
                    if (!output.equals("101")) {
                        return CheckResult.wrong(
                            "The program printed not the same number that was entered " +
                            "(when one number is entered it is a valid expression).");
                    }

                    // input one negative number
                    output = main.execute("-302").trim();
                    if (!output.equals("-302")) {
                        return CheckResult.wrong(
                            "The program printed not the same number that was entered.");
                    }

                    // input empty string
                    output = main.execute("");
                    if (output.length() != 0) {
                        return CheckResult.wrong(
                            "Incorrect response to an empty string. " +
                            "The program should not print anything.");
                    }

                    // the sum of the numbers is zero
                    output = main.execute("10 - 7 - 3").trim();
                    if (!output.equals("0")) {
                        return CheckResult.wrong(
                            "The problem when sum is equal to 0 has occurred.");
                    }

                    // test of multiple operations
                    output = main.execute("5 --- 2 ++++++ 4 -- 2 ---- 1").trim();
                    if (!output.equals("10")) {
                        return CheckResult.wrong(
                            "The program cannot process multiple operations " +
                                "with several operators.");
                    }

                    // test of /exit
                    output = main.execute("/exit").trim().toLowerCase();
                    if (!output.startsWith("bye")) {
                        return CheckResult.wrong(
                            "Your program didn't print \"bye\" after entering \"/exit\".");
                    }

                    return new CheckResult(main.isFinished(),
                        "Your program should exit after entering \"/exit\".");
                }),

                new TestCase<String>().setDynamicTesting(() -> {
                    TestedProgram main = new TestedProgram();

                    // A set of positive tests for this step
                    main.start();

                    // tests of invalid expressions
                    String output = main.execute("123+").trim().toLowerCase();
                    if (!output.startsWith("invalid")) {
                        return CheckResult.wrong(
                            "The program cannot process an invalid expression.");
                    }

                    output = main.execute("321-").trim().toLowerCase();
                    if (!output.startsWith("invalid")) {
                        return CheckResult.wrong(
                            "The program cannot process an invalid expression.");
                    }

                    // input one number with plus in front of it
                    output = main.execute("+7").trim();
                    if (!output.equals("7")) {
                        return CheckResult.wrong(
                            "The program not correctly processes useless plus sign.");
                    }

                    // test of /exit
                    output = main.execute("/exit").trim().toLowerCase();
                    if (!output.startsWith("bye")) {
                        return CheckResult.wrong(
                            "Your program didn't print \"bye\" after entering \"/exit\".");
                    }

                    return new CheckResult(main.isFinished(),
                        "Your program should exit after entering \"/exit\".");
                }),
                new TestCase<String>().setDynamicTesting(() -> {
                    TestedProgram main = new TestedProgram();

                    // A set of negative tests for this step
                    main.start();

                    // test of entering not numbers
                    String output = main.execute("abc").trim().toLowerCase();
                    if (!output.startsWith("invalid")) {
                        return CheckResult.wrong(
                            "The program should print \"Invalid expression\" " +
                            "when not a numbers are entered");
                    }

                    output = main.execute("one + two + three").trim().toLowerCase();
                    if (!output.startsWith("invalid")) {
                        return CheckResult.wrong(
                            "The program should print \"Invalid expression\" " +
                            "when not a numbers are entered.");
                    }

                    // test of a nonexistent command
                    output = main.execute("/go").trim().toLowerCase();
                    if (!output.startsWith("unknown")) {
                        return CheckResult.wrong(
                            "The program should print \"Unknown command\" " +
                            "when a nonexistent command is entered.");
                    }

                    // test of /exit
                    output = main.execute("/exit").trim().toLowerCase();
                    if (!output.startsWith("bye")) {
                        return CheckResult.wrong(
                            "Your program didn't print \"bye\" after entering \"/exit\".");
                    }

                    return new CheckResult(main.isFinished(),
                        "Your program should exit after entering \"/exit\".");
                })
            );
        }
    }
  learner_created: false
feedback_link: https://hyperskill.org/learn/step/7813#comment
status: Solved
feedback:
  message: Congratulations!
  time: Sun, 07 Aug 2022 14:24:31 UTC
record: 8
